# - *- coding: utf- 8 - *-
import telebot
from telebot import types
import requests
import json
import datetime
import time
import requests
import apiinfo
import sqlite3
from collections import defaultdict
from threading import Timer
import clnews
import clmakegr
import warnings
import os
import sys
import psycopg2
from flask import Flask, request


WEBHOOK_SSL_CERT = './public.pem'
WEBHOOK_SSL_PRIV = './private.key'
PORT = 8443


warnings.filterwarnings('ignore')


'''–¢–æ–∫–µ–Ω –∏ –≤—Ä–µ–º—è'''
TOKEN = '1070701499:AAHJH6wiCiN9BUj4MqnzpM6L46OXReF9fGs'
TIMEZONE = 'Europe/Kiev'
CURRENT_TIMEZONE = 'Kiev'
now = datetime.datetime.now()
DATABASE_URL = os.environ['postgresql-shallow-52252']
os.environ['postgresql-shallow-52252'] = 'postgres://mstsdlykkfafbz:92d6171ebfedd9fa2b493c970dacd0c66f711ca0e9a287ba031844b3a5a65038@ec2-3-229-210-93.compute-1.amazonaws.com:5432/d8osekavt32nmq'
bot = telebot.TeleBot(TOKEN, threaded=False)
bot.remove_webhook()
URL='https://afternoon-ridge-23028.herokuapp.com:'+str(PORT)
# URL = 'https://82.193.126.240:' + str(PORT)
bot.set_webhook(url=URL, certificate=open(WEBHOOK_SSL_CERT, 'rb'))
'''–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞'''
keyboard_1 = telebot.types.ReplyKeyboardMarkup(True, True)
keyboard_1.row('BTC info', 'ETH info', 'XRP info')
'''–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'''

conn = psycopg2.connect(DATABASE_URL, sslmode='require')
cursor = conn.cursor()
create_table_btc = """CREATE TABLE IF NOT EXISTS Cryptobot
                    (Bitcoin char(50) NOT NULL,
                    Ethereum char(50) NOT NULL,
                    XRP char(50) NOT NULL,
                    "date" char(10) NOT NULL);"""
cursor.execute(create_table_btc)
conn.commit()
create_table_user = """CREATE TABLE IF NOT EXISTS Userinfo ("user_id" char(50) NOT NULL);"""
cursor.execute(create_table_user)
conn.commit()
'''–î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'''
done = False


'''WEBHOOK'''

app = Flask(__name__)
@app.route('/', methods=['POST', 'GET'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return 'ok', 200

'''–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥'''
@bot.message_handler(commands=['start'])
def message_start(message):
    bot.send_message(message.chat.id, 'ü§ñ–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, '+ message.from_user.first_name + '!\n' \
    'üíµ–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –í–∞–º —Ü–µ–Ω—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤, –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –≤ —Å—Ñ–µ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç \n' +
    'üí∞–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∂–º–∏—Ç–µ /help.\n\n\n'+
    'Powered by Alexey Horbunov\n'+
    '@Alexey_Horbunov', reply_markup=keyboard_1)

    def update_crypto_price():
        Timer(43200, update_crypto_price).start()
        update_cryptos = """INSERT INTO Cryptobot(Bitcoin, Ethereum, XRP, "date")
        SELECT %s, %s, %s, %s
        WHERE NOT EXISTS (
        SELECT * FROM Cryptobot WHERE "date" = %s );"""
        cursor.execute(update_cryptos, (apiinfo.get_btc(), apiinfo.get_eth(), apiinfo.get_xrp(), now.strftime("%d-%m-%Y"), now.strftime("%d-%m-%Y")))
        conn.commit()
    update_crypto_price()


@bot.message_handler(commands=['help'])
def message_help(message):
    markup_author = types.InlineKeyboardMarkup(row_width=1)
    item_author = types.InlineKeyboardButton('–û–± –∞–≤—Ç–æ—Ä–µ –±–æ—Ç–∞', callback_data='author')
    markup_author.add(item_author)
    bot.send_message(message.chat.id, '‚ùì–ò—Ç–∞–∫, –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –∏–º–µ–µ—Ç —Ç–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: \n' +
    '1Ô∏è‚É£) –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞–∂–∞–≤ –∫–æ–º–∞–Ω–¥—É /exchange –∏ –≤—ã–±—Ä–∞–≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n'+
    '2Ô∏è‚É£) –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å –∫—Ä—É–ø–Ω–µ–π—à–µ–π '+
     '–±–∏—Ä–∂–∏ Binance –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–Ω–∏–∑—É, –∞ —Ç–∞–∫–∂–µ –ø–æ—Å–ª–µ –ø—Ä–æ–º–æ—Ç—Ä–µ—Ç—å –µ–µ –≥—Ä–∞—Ñ–∏–∫, –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –±–∏—Ä–∂—Éüî∂', reply_markup=markup_author)

@bot.message_handler(commands=['exchange'])
def propose_cryptos(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å: ', reply_markup = keyboard_1)

@bot.message_handler(commands=['news'])
def propose_news(message):
    markup_news = types.InlineKeyboardMarkup(row_width=1)
    item1_news = types.InlineKeyboardButton('Bitexpert', callback_data='btcxpert')
    item2_news = types.InlineKeyboardButton('Forklog', callback_data='forklog')
    item3_news = types.InlineKeyboardButton('Coinspot', callback_data='coinspot')
    markup_news.add(item1_news, item2_news, item3_news)
    bot.send_message(message.chat.id, 'üì∞–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: ', reply_markup=markup_news)


@bot.message_handler(content_types=['text'])
def give_cryptos(message):
    markup1 = types.InlineKeyboardMarkup(row_width=1)
    item1_1 = types.InlineKeyboardButton('üìä–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ BTC', callback_data='grbtc')
    item1_2 = types.InlineKeyboardButton(text="üî∂–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Binance", url="https://www.binance.com/en/trade/BTC_USDT")
    markup1.add(item1_1, item1_2)

    markup2 = types.InlineKeyboardMarkup(row_width=1)
    item2_1 = types.InlineKeyboardButton('üìä–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ ETH', callback_data='greth')
    item2_2 = types.InlineKeyboardButton(text="üî∂–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Binance", url="https://www.binance.com/en/trade/ETH_USDT")
    markup2.add(item2_1, item2_2)

    markup3 = types.InlineKeyboardMarkup(row_width=1)
    item3_1 = types.InlineKeyboardButton('üìä–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ XRP', callback_data='grxrp')
    item3_2 = types.InlineKeyboardButton(text="üî∂–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Binance", url="https://www.binance.com/en/trade/XRP_USDT")
    markup3.add(item3_1, item3_2)


    if message.text.lower() == 'btc info':
        bot.send_message(message.chat.id, '‚Ñπ–ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...........')
        res = message.text[:3]
        price_usd = apiinfo.get_btc()
        bot.send_message(message.chat.id,
        'üö© BITCOIN INFO üö©\n'+
        'üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –±–∏—Ä–∂–∏ üî∏Binanceüî∏\n'+
        '–ü–∞—Ä–∞ üîπBTC-USDTüîπ üìÑ\n'+
        'üí∞' + price_usd +'\n',reply_markup=markup1)

    elif message.text.lower() == 'eth info':
        bot.send_message(message.chat.id, '‚Ñπ–ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...........')
        res = message.text[:3]
        price_usd = apiinfo.get_eth()
        bot.send_message(message.chat.id,
        'üö© ETHEREUM INFO üö©\n'+
        'üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –±–∏—Ä–∂–∏ üî∏Binanceüî∏\n'+
        '–ü–∞—Ä–∞ üîπETH-USDTüîπ üìÑ\n'+
        'üí∞' + price_usd +'\n',reply_markup=markup2)

    elif message.text.lower() == 'xrp info':
        bot.send_message(message.chat.id, '‚Ñπ–ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...........')
        res = message.text[:3]
        price_usd = apiinfo.get_xrp()
        bot.send_message(message.chat.id,
        'üö© XRP INFO üö©\n'+
        'üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –±–∏—Ä–∂–∏ üî∏Binanceüî∏\n'+
        '–ü–∞—Ä–∞ üîπXRP-USDTüîπ üìÑ\n'+
        'üí∞' + price_usd +'\n',reply_markup=markup3)

    else:
        bot.send_message(message.chat.id, '‚Äº–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏–ª–∏ —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.' +
        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ —É–∑–Ω–∞–π—Ç–µ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /help‚Äº')
'''
    if done:
        def timed_job():
            Timer(10, timed_job).start()
            high = 9600
            low = 9400
            price_usd = float(apiinfo.get_btc())
            if price_usd >= high:
                bot.send_message(message.chat.id, text= '–ë–û–õ–¨–®–ï –í–ï–†–•–ù–ï–ô –¢–û–ß–ö–ò')
            if price_usd <= high:
                bot.send_message(message.chat.id, text= '–ú–ï–ù–¨–®–ï –ù–ò–ñ–ù–ï–ô –¢–û–ß–ö–ò')

        timed_job()
'''

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        markup_go_to_bitexpert = types.InlineKeyboardMarkup(row_width=1)
        item_bitexpert = types.InlineKeyboardButton('‚û°–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Bitexpert.io‚û°', url='https://bitexpert.io')
        markup_go_to_bitexpert.add(item_bitexpert)

        markup_go_to_coinspot = types.InlineKeyboardMarkup(row_width=1)
        item_coinspot = types.InlineKeyboardButton('‚û°–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Coinspot.io‚û°', url='https://coinspot.io')
        markup_go_to_coinspot.add(item_coinspot)

        markup_go_to_forklog = types.InlineKeyboardMarkup(row_width=1)
        item_forklog = types.InlineKeyboardButton('‚û°–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Forklog.com‚û°', url='https://forklog.com')
        markup_go_to_forklog.add(item_forklog)
        if call.data == 'grbtc':
            clmakegr.get_gr_btc()
            gr = open('GRbtc.png', 'rb')
            bot.send_photo(call.message.chat.id, gr, reply_markup=keyboard_1)
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–í–∞—à –≥—Ä–∞—Ñ–∏–∫")
            os.remove('GRbtc.png')
        elif call.data == 'greth':
            clmakegr.get_gr_eth()
            gr = open('GReth.png', 'rb')
            bot.send_photo(call.message.chat.id, gr, reply_markup=keyboard_1)
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–í–∞—à –≥—Ä–∞—Ñ–∏–∫")
            os.remove('GReth.png')
        elif call.data == 'grxrp':
            clmakegr.get_gr_xrp()
            gr = open('GRxrp.png', 'rb')
            bot.send_photo(call.message.chat.id, gr, reply_markup=keyboard_1)
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–í–∞—à –≥—Ä–∞—Ñ–∏–∫")
            os.remove('GRxrp.png')
        elif call.data == 'author':
            photo_creator = open('MRZ.jpg', 'rb')
            bot.send_photo(call.message.chat.id, photo_creator,'<b>–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π –ì–æ—Ä–±—É–Ω–æ–≤ –∏ —è —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞üòé</b>\n\n'+
            '–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —è —Å—Ç—É–¥–µ—Ç –ö–ü–ò, —É–≤–µ–ª–µ–∫–∞—é—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ Python, –≤–º–µ—Å—Ç–µ —Å —ç—Ç–∏–º —Ä–∞–±–æ—Ç–∞—é –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–æ–º –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ Bitexpert.io\n'+
            '–õ—é–±–ª—é —É—á–∏—Ç—å—Å—è –∏ –æ—Ç–∫—Ä—ã—Ç –≤—Å–µ–º—É –Ω–æ–≤–æ–º—É\n\n'+
            '<i>–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä—é –≤—Å–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ –ø–æ–≤–æ–¥—É –º–æ–µ–≥–æ –±–æ—Ç–∞</i>\n'+
            '–û—Ç–≤–µ—á—É –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ - @Alexey_Horbunov, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –ø–æ—á—Ç—É algoritm211@gmail.com\n\n'+
            'P.S. –ù–∞ —Ñ–æ—Ç–æ –º–æ–π –∫–æ—Ç –ú—É—Ä–∑–∞–∫)', parse_mode='HTML', reply_markup=keyboard_1)

        elif call.data == 'btcxpert' or 'forklog' or 'coinspot':
            if call.data == 'btcxpert':
                data_news_bitexpert = clnews.get_news_bitexpert_io()
                bot.send_message(call.message.chat.id, text='----------\n' + 'üìç<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ Bitexpert.io</b>üìç\n' + '----------\n' + \
                                                            data_news_bitexpert, parse_mode='HTML', reply_markup=markup_go_to_bitexpert)
            if call.data == 'forklog':
                data_news_forklog = clnews.get_news_forklog_com()
                bot.send_message(call.message.chat.id, text='----------\n' + 'üìç<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ Forklog.com</b>üìç\n' + '----------\n' + \
                                                            data_news_forklog, parse_mode='HTML', reply_markup=markup_go_to_forklog)

            if call.data == 'coinspot':
                data_news_coinspot = clnews.get_news_coinspot_io()
                bot.send_message(call.message.chat.id, text='----------\n' + 'üìç<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ Coinspot.io</b>üìç\n' + '----------\n' + \
                                                            data_news_coinspot, parse_mode='HTML', reply_markup=markup_go_to_coinspot)





'''running'''
# bot.polling(none_stop=True)
if __name__ == '__main__':
    app.run(host="0.0.0.0", port=PORT, ssl_context=(WEBHOOK_SSL_CERT, WEBHOOK_SSL_PRIV), debug = False)
